<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>/post/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0100</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mutliple Time Series Granger Causality</title>
      <link>/post/mutliple-time-series-granger-causality/</link>
      <pubDate>Wed, 12 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/mutliple-time-series-granger-causality/</guid>
      <description>I have been recently working on a paper about the short-term car registration forecasting. Forecasting models were based on several underlying variables which were analysed by a standard Vector Autoregressive Model. As the main purpose of the paper was not to present a black-box model with a good predictive power, we needed to analyse leading indicators. A traditional approach to identify “cause and effects” in the context of time series analysis is to perform the Granger Causality test.</description>
    </item>
    
    <item>
      <title>Plotly Integration</title>
      <link>/post/plotly2/</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/plotly2/</guid>
      <description>Let’s try some plotly
library(widgetframe)library(dplyr)library(ggplot2)library(plotly)library(webshot)p1 &amp;lt;- mtcars %&amp;gt;%mutate(Cylinders = as.factor(cyl)) %&amp;gt;%ggplot(., aes(x=hp, y=mpg, col=Cylinders) ) + geom_point(size=4, alpha=0.7) + theme_bw()p2 &amp;lt;- ggplotly(p1)frameWidget(p2){&#34;x&#34;:{&#34;url&#34;:&#34;/post/2019-02-02-plotly2_files/figure-html//widgets/widget_unnamed-chunk-2.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}</description>
    </item>
    
    <item>
      <title>How about rMarkdown?</title>
      <link>/post/how-about-rmarkdown/</link>
      <pubDate>Thu, 27 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/how-about-rmarkdown/</guid>
      <description>Use the long name of the extension to do the trick:
hist(rnorm(1000))  </description>
    </item>
    
  </channel>
</rss>